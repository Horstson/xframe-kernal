///assemble_name
${assemble_basic}$Assemble
///
public class ${assemble_name} extends ${assemble_basic} implements dev.xframe.modular.ModuleTypeLoader.IModuleLoader{
    
    ///logger_field
    static final org.slf4j.Logger _logger = org.slf4j.LoggerFactory.getLogger("${assemble_basic}");
    ///

    ///modules_field
    final Object[] _modules = new Object[${module_count}];
    ///
    
    public ${assemble_simple_name}(long id, dev.xframe.action.ActionQueue actionQueue)
    ///constructor
    {
        super(${params});
    }
    ///

    ///load_method
    public synchronized boolean load(dev.xframe.modular.ModuleType moduleType) {
        try {
            if (dev.xframe.modular.ModuleType.RESIDENT == moduleType) {
                ${multi_resident_load}
                ///moudle_load_part
                if (this._modules[${index}] == null) {
                    ${module_class} ${local_name} = ${module_assign};
                    ${module_load_invoke_parts}
                    /*
                    ${local_name}.load((TPlayer)this);
                    ${local_name}.z_regist((Registrator)this);
                    */
                    ${inject_setup_part}
                    ///inject_setup_part
                    this.${inject_field_name} = ${inject_assign};
                    ///
                    ${agent_setup_part}
                    ///agent_setup_part
                    dev.xframe.modular.ModularHelper.appendAgent(this._modules[${agent_index}], ${local_name});
                    ///
                    this._modules[${index}] = ${local_name};
                }
                ///
            } else {
                ${multi_transient_load}
                /*module_load_part*/
            }
        } catch (Throwable throwable) {
            _logger.error("load module error:", throwable);
            return false;
        }
        return super.load(moduleType);
    }
    ///
    ///direct_module_assign
    new ${module_class}()
    ///
    ///sharable_module_assign
    new ${module_class}((dev.xframe.modular.ModuleContainer)this)
    ///
    
    ///direct_inject_assign
    ${local_name}
    ///
    ///sharable_inject_assign
    ${local_name}
    ///

    ///unload_method
    public synchronized boolean unload(dev.xframe.modular.ModuleType moduleType) {
        try {
            if (dev.xframe.modular.ModuleType.RESIDENT == moduleType) {
                ${multi_resident_unload}
                ///module_unload_part
                ${module_class} ${local_name} = (${module_class})this._modules[${index}];
                if (${local_name} != null) {
                    ${module_unload_invoke_parts}
                    /*
                    ${local_name}.a_unregist((Registrator)this);
                    ${local_name}.save();
                    */
                } else {
                    _logger.error("unload module is null: [${module_class}]");
                }
                ${inject_remove_part}
                ///inject_remove_part
                this.${inject_field_name} = null;
                ///
                ${agent_remove_part}
                ///agent_remove_part
                ((${agent_class})this._modules[${agent_index}]).removeCombineDelegate(${local_name});
                ///
                this._modules[${index}] = null;
                ///
            } else {
                ${multi_transient_unload}
                /*module_unload_part*/
            }
        }  catch (Throwable throwable) {
            _logger.error("unload module error:", throwable);
            return false;
        }
        return super.unload(moduleType);
    }
    ///

    ///save_method
    public boolean save() {
        ${multi_module_save}
        ///module_save_part
        ${module_class} ${local_name} = (${module_class})this._modules[${index}];
        if (${local_name} != null) {
            try {
                ${module_save_invoke_parts}
                /*
                ${local_name}.save();
                */
            } catch (Throwable throwable) {
                _logger.warn("save module error:", throwable);
            }
        }
        ///
        return super.save();
    }
    ///

    ///loadmodule_method
    public Object _loadModule(int n) {
        return this._modules[n];
    }
    ///
}
